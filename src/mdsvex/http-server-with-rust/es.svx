---
title: "Desarrollando un servidor HTTP en Rust"
description: "Introduccion a Axum para desarrollar un servidor HTTP en Rust"
categories: [rust, axum, http, rest]
icon: rust
langs: [rust]
date: 2023-09-12
preview_image_url: "https://images.unsplash.com/photo-1615834751896-b15e2330b289?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1734&q=1"
---

## Por qué Rust?

En la mayoria de los lenguajes de programación nos vemos en la obligación de
hacer un intergambio entre eficiencia, ergonomía o seguridad.

Lenguajes como JavaScript/TypeScript, nos brindan ergonomía, tenemos el foco en
la lógica de negocio, las reglas que se deben de implementar, pero no tenemos
garantias en la fidelidad. Existen problemas de tipos, donde no se asegura que
un valor sera un `number` hasta el final de la función, tenemos casos similares
al `NullPointerException`, donde se asume que un objeto está presente e
intentamos acceder a un campo, el que termina en `Cannot read property 'X' of null`,
esto sin considerar el costo en recursos del runtime V8; Gecko; etc y el
[Garbage Collector][1].

Lenguajes como C y C++, son bastante eficientes en el contexto de ejecución, no
tienen un [Garbage Collector][1], el lenguaje nos permite acceder de forma
nativa a las librerias del sistema, también es posible escribir procesos
multi-thread tanto con [green threads][2] como con threads regulares.

El intercambio en estos lenguajes no se encuentra en la eficiencia, si no en la
seguridad, tanto en C como en C++ heredamos la tarea de administrar memoria de
forma manual, cada objeto dinámico como `arrays`, `struct`s ó `class`es, debe
ser explicitamente alojado en memoria, es consumido y luego desalojado.

Si esta tarea no se hace de forma correcta, podemos tener probelmas de memoria
como [_memory leaks_][3] ó [_null pointer exceptions_][4].

Otra complejidad en estos lenguajes es el manejo de dependencias, no existe un
servicio predominante encargado de este aspecto en C ó C++, por lo general
los programas en C y C++ usan librerias del sistema para funcionar. Por ejemplo,
si quieres hacer un pedido HTTP probablemente uses la librería de cURL para esto.

Podriamos hacer un review de cada lenguaje pero este seria una nota muy larga,
así que saltare a Rust.

Rust se enfoca en resolver los problemas anteriormente mencionados, el diseño
del lenguaje busca hacer _Low Level Programming with High Level Ergonomics_,
básicamente se quirere lograr un lenguaje sencillo de escribir pero tan
eficiente como C y C++, Rust logra esto a través de su diseño.

- Rust es rápido, compila a lenguaje de máquina y no usa un runtime, al menos de
que se agrege de forma explícita.
- Rust no tiene un Garbage Collector, de lo contrario Rust usa el método RAII
que significa _Resource Acquisition Is Initialization_, básicamente no eres
responsable de alojar ó desalojar memoria (al menos de que quieras hacerlo claro).
- Rust identifica código inseguro al momento de compilar, si por ejemplo
intentas acceder a un vector en un indice arbitrario, Rust colocará código que
verifique si el índice usado esta dentro del rango del vector.
- Rust cuenta con `cargo`, un Package Manager similar a `npm`, `pip` ó NuGet.

Estás son algunas de las caracteristicas mas relevantes, Rust también tiene un
toolchain para hacer `lint` y `format` de tu código, así como correr tests y
benchmarks sin necesidad de incluir librerias.

## Talk is Cheap, Show me The Code

Empecemos! Para continuar vas a necesitar instalar Rust en tu sistema. Rust puede
ser instalado usando [`rustup`][5], si estas usando un sistema de base Unix,
puedes usar el comando cURL que se encuntra en la página. Si estas en Windows
vas a necesitar los Build Tools que se adquieren a través de Visual Studio, hace
un tiempo escribi una guía de como hacerlo acá.

### Qué vamos a desarrollar?

Para esta nota vamos a desarrollar la solución [_The Local Library website_][7] que
está disponible en MDN (Mozilla Developer Network). Si vienes de JavaScript vas
a tener la ventaja de entendor la contraparte del código en Rust y podrás
comparar.

> Fué en Mozilla que nació Rust, el autor principal es  Graydon Hoare. [Lee más acá][8].

### Creando el Proyecto

Una vez instalado Rust en tu sistema deberas de poder correr el siguiente
comando:

```bash
cargo --version
```

Deberias de ver un output similar a este:

```bash
cargo 1.72.0 (103a7ff2e 2023-08-15)
```

Luego crearemos el proyecto en nuestro directorio favorito usando el comando
`cargo new local-library-website`.

Este comando creara un directorio `local-library-website`, que poseerá la
siguiente estructura

```
local-library-website
├── src
│   └── main.rs
└── Cargo.toml
```

[1]: https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals
[2]: https://en.wikipedia.org/wiki/Green_thread
[3]: https://en.wikipedia.org/wiki/Memory_leak
[4]: https://en.wikipedia.org/wiki/Null_pointer
[5]: https://rustup.rs
[6]: https://estebanborai.com/en/notes/installing-the-rust-programming-language-on-windows
[7]: https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website
[8]: https://www.technologyreview.com/2023/02/14/1067869/rust-worlds-fastest-growing-programming-language/
